apiVersion: apps/v1
kind: StatefulSet
metadata:
  labels:
    app.kubernetes.io/component: sentinel
    app.kubernetes.io/name: redis-sentinel
    app.kubernetes.io/part-of: redis
    app.redis.headless: redis-headless
    app.redis.instance: redis
    app.redis.svc: redis
    app.redis.svc-sentinel: redis-sentinel
  name: redis-sentinel
  namespace: test-redis
spec:
  persistentVolumeClaimRetentionPolicy:
    whenDeleted: Retain
    whenScaled: Retain
  podManagementPolicy: OrderedReady
  replicas: 3
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app.kubernetes.io/component: sentinel
      app.kubernetes.io/name: redis-sentinel
      app.kubernetes.io/part-of: redis
      app.redis.instance: redis
  serviceName: headless-redis-sentinel
  template:
    metadata:
      labels:
        app.kubernetes.io/component: sentinel
        app.kubernetes.io/name: redis-sentinel
        app.kubernetes.io/part-of: redis
        app.redis.headless: redis-headless
        app.redis.instance: redis
        app.redis.svc: redis
        app.redis.svc-sentinel: redis-sentinel
    spec:
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - podAffinityTerm:
              labelSelector:
                matchLabels:
                  app.kubernetes.io/component: sentinel
                  app.kubernetes.io/name: redis-sentinel
                  app.redis.instance: redis
              topologyKey: kubernetes.io/hostname
            weight: 10
      containers:
      - args:
        - /data/conf/sentinel.conf
        - --sentinel
        command:
        - redis-server
        env:
        - name: NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: REDIS_INSTANCE
          valueFrom:
            fieldRef:
              fieldPath: metadata.labels['app.redis.instance']
        - name: REDIS_HEADLESS_SVC
          valueFrom:
            fieldRef:
              fieldPath: metadata.labels['app.redis.headless']
        - name: REDIS_SVC
          valueFrom:
            fieldRef:
              fieldPath: metadata.labels['app.redis.svc']
        - name: SENTINEL_SVC
          valueFrom:
            fieldRef:
              fieldPath: metadata.labels['app.redis.svc-sentinel']
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: REDIS_INITIAL_MASTER_HOST
          value: $(REDIS_INSTANCE)-0.$(REDIS_HEADLESS_SVC).$(NAMESPACE).svc.cluster.local
        - name: REDIS_NAME
          value: $(REDIS_INSTANCE)_$(NAMESPACE)
        - name: POD_FQDN
          value: $(POD_NAME).headless-$(SENTINEL_SVC).$(NAMESPACE).svc.cluster.local
        - name: ALLOW_EMPTY_PASSWORD
          value: "yes"
        - name: REDIS_PASSWORD
          value: $(REDIS_INSTANCE)_$(NAMESPACE)
        - name: REDIS_TLS_ENABLED
          value: "no"
        - name: REDIS_SENTINEL_TLS_ENABLED
          value: "no"
        - name: QUORUM
          value: "2"
        - name: REDIS_MODE
          value: sentinel
        image: redis:7
        imagePullPolicy: IfNotPresent
        lifecycle:
          preStop:
            exec:
              command:
              - sleep
              - "30"
        livenessProbe:
          exec:
            command:
            - sh
            - -c
            - /opt/scripts/sentinel_liveness.sh
          failureThreshold: 6
          initialDelaySeconds: 20
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 5
        name: sentinel
        ports:
        - containerPort: 26379
          name: tcp-sentinel
        readinessProbe:
          exec:
            command:
            - sh
            - -c
            - /opt/scripts/sentinel_liveness.sh
          failureThreshold: 5
          initialDelaySeconds: 20
          periodSeconds: 5
          successThreshold: 1
          timeoutSeconds: 1
        volumeMounts:
        - mountPath: /opt/scripts
          name: redis-scripts
        - mountPath: /data
          name: sentinel
        - mountPath: /opt/redis-sentinel
          name: sentinel-init-config
        - mountPath: /opt/sentinel-extra-ro
          name: sentinel-extra-config-ro
        - mountPath: /opt/sentinel-extra
          name: sentinel-extra-config
      initContainers:
      - args:
        - -c
        - |-
          /opt/scripts/prestart.sh /opt/redis-sentinel/sentinel-init.conf /data/conf/sentinel.conf && \
           cp /opt/sentinel-extra-ro/*.conf /opt/sentinel-extra/ && \
           /opt/scripts/replace-values.sh /opt/sentinel-extra
        command:
        - bash
        env:
        - name: NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: REDIS_INSTANCE
          valueFrom:
            fieldRef:
              fieldPath: metadata.labels['app.redis.instance']
        - name: REDIS_HEADLESS_SVC
          valueFrom:
            fieldRef:
              fieldPath: metadata.labels['app.redis.headless']
        - name: REDIS_SVC
          valueFrom:
            fieldRef:
              fieldPath: metadata.labels['app.redis.svc']
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: SENTINEL_SVC
          valueFrom:
            fieldRef:
              fieldPath: metadata.labels['app.redis.svc-sentinel']
        - name: REDIS_SENTINEL_HOST
          value: $(REDIS_SENTINEL_SVC).$(NAMESPACE).svc.cluster.local
        - name: REDIS_INITIAL_MASTER_HOST
          value: $(REDIS_INSTANCE)-0.$(REDIS_HEADLESS_SVC).$(NAMESPACE).svc.cluster.local
        - name: REDIS_NAME
          value: $(REDIS_INSTANCE)_$(NAMESPACE)
        - name: HEADLESS_SVC
          value: $(REDIS_HEADLESS_SVC).$(NAMESPACE).svc.cluster.local
        - name: POD_FQDN
          value: $(POD_NAME).headless-$(SENTINEL_SVC).$(NAMESPACE).svc.cluster.local
        - name: REDIS_USER
          value: default
        - name: REDIS_PASSWORD
          value: $(REDIS_INSTANCE)_$(NAMESPACE)
        image: bash
        name: init
        volumeMounts:
        - mountPath: /opt/scripts
          name: redis-scripts
        - mountPath: /data
          name: sentinel
        - mountPath: /opt/redis-sentinel
          name: sentinel-init-config
        - mountPath: /opt/sentinel-extra
          name: sentinel-extra-config
        - mountPath: /opt/sentinel-extra-ro
          name: sentinel-extra-config-ro
      volumes:
      - configMap:
          defaultMode: 493
          name: redis-scripts-g75g2chb8d
        name: redis-scripts
      - configMap:
          name: sentinel-init-config-4ctc9d68g5
        name: sentinel-init-config
      - configMap:
          name: sentinel-extra-config-f98th7gb2b
        name: sentinel-extra-config-ro
      - emptyDir: {}
        name: sentinel-extra-config
  volumeClaimTemplates:
  - apiVersion: v1
    kind: PersistentVolumeClaim
    metadata:
      labels:
        app.kubernetes.io/component: sentinel
        app.kubernetes.io/name: redis-sentinel
        app.kubernetes.io/part-of: redis
        app.redis.instance: redis
      name: sentinel
    spec:
      accessModes:
      - ReadWriteOnce
      resources:
        requests:
          storage: 100Mi
      storageClassName: local
      volumeMode: Filesystem
