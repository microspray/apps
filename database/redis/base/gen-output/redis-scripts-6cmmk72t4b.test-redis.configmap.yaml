apiVersion: v1
data:
  prestart.sh: |
    #!/usr/bin/env bash

    # 1. Copy baseconfig to /data/redis.conf if doesn't exists
    # 2. Sed values in /data/redis.conf
    # 3. print /data/redis.conf

    REDIS_NAME=${REDIS_NAME:-"myMaster"}
    REDIS_MASTER=${REDIS_INITIAL_MASTER_HOST:-"localost"}
    QUORUM=${QUORUM:-"2"}
    REDIS_PASSWORD=${REDIS_PASSWORD:-"default"}
    POD_FQDN=${POD_FQDN:-"localhost"}
    REDISCONF=${REDISCONF:-"/data/conf/redis.conf"}

    initconf=$1
    confdest=$2
    overwrite="no"
    if [ $# == 3 ]; then
        overwrite=$3
    fi

    echo "$initconf $confdest" "$overwrite"
    mkdir -p $(dirname $confdest)

    if [ ! -f $confdest ] || [[ "$overwrite" == "yes" ]]; then
        cp $initconf $confdest
    fi

    sed_values() {
        file=$1
        sed -i "s/__REDIS_NAME__/${REDIS_NAME}/g" $file
        sed -i "s/__REDIS_MASTER__/${REDIS_MASTER}/g" $file
        sed -i "s/__REDIS_PASSWORD__/${REDIS_PASSWORD}/g" $file
        sed -i "s/__POD_FQDN__/${POD_FQDN}/g" $file
        sed -i "s/__QUORUM__/${QUORUM}/g" $file
        sed -i "s/__HEADLESS_SVC__/${HEADLESS_SVC}/g" $file
        sed -r -i "s/(sentinel monitor .*)[0-9]$/\1 ${QUORUM}/g" $file
        if [[ "$POD_FQDN" == "$REDIS_MASTER" ]]; then
            sed -i "s/__REPLICAOF__//g" $file
        else
            sed -i "s/__REPLICAOF__/replicaof ${REDIS_MASTER} 6379/g" $file
        fi

    }

    sed_values $confdest
    chmod 766 $confdest
    cat $confdest
  prestop.sh: |
    #!/usr/bin/env bash
    REDIS_NAME=${REDIS_NAME:-"myMaster"}
    REDIS_PORT=${REDIS_PORT:-"6379"}
    REDIS_HOST=${REDIS_HOST:-"0.0.0.0"}
    REDIS_SENTINEL_HOST=${REDIS_SENTINEL_HOST:-"0.0.0.0"}
    REDIS_SENTINEL_PORT=${REDIS_SENTINEL_PORT:-"26379"}
    REDIS_MODE=${REDIS_MODE:-"server"}
    REDIS_USER=${REDIS_USER:-"default"}
    REDIS_PASSWORD=${REDIS_PASSWORD:-"default"}
    uri="redis://$REDIS_USER:$REDIS_PASSWORD@$REDIS_SENTINEL_HOST:$REDIS_SENTINEL_PORT"
    urilocal="redis://$REDIS_USER:$REDIS_PASSWORD@$REDIS_HOST:$REDIS_PORT"
    get_redis_role() {
      is_master=$(
        redis-cli \
          -u $urilocal \
          info | grep -c 'role:master' || true
      )
    }

    get_redis_role
    if [[ "$is_master" -eq 1 ]]; then
      if [[ "$REDIS_MODE" == "sentinel" ]]; then
        echo "We are in sentinel mode, we're waiting for the failover to happen."
      else
        echo "This node is currently master, we trigger a failover."
      response=$(
        redis-cli \
          -u $uri \
          SENTINEL failover $REDIS_NAME
      )
      fi
      if [[ "$response" != "OK" ]] ; then
        echo "$response"
        exit 1
      fi
      timeout=30
      while [[ "$is_master" -eq 1 && $timeout -gt 0 ]]; do
        sleep 1
        get_redis_role
        timeout=$((timeout - 1))
      done
      echo "Failover successful"
    else
        echo "This node is currently slave, we do nothing."
    fi
  redis_liveness.sh: |
    #!/bin/bash
    REDIS_USER=${REDIS_USER:-"default"}
    REDIS_PASSWORD=${REDIS_PASSWORD:-"default"}
    REDIS_PORT=${REDIS_PORT:-"6379"}
    REDIS_HOST=${REDIS_HOST:-"0.0.0.0"}
    uri="redis://$REDIS_USER:$REDIS_PASSWORD@$REDIS_HOST:$REDIS_PORT"

    response=$(
      redis-cli \
        -u $uri \
        ping
    )
    if [ "$response" != "PONG" ] && [ "${response:0:7}" != "LOADING" ] ; then
      echo "$response"
      exit 1
    fi
    echo "response=$response"
  redis_readiness.sh: |
    #!/bin/bash

    REDIS_USER=${REDIS_USER:-"default"}
    REDIS_PASSWORD=${REDIS_PASSWORD:-"default"}
    REDIS_PORT=${REDIS_PORT:-"6379"}
    REDIS_HOST=${REDIS_HOST:-"0.0.0.0"}
    uri="redis://$REDIS_USER:$REDIS_PASSWORD@$REDIS_HOST:$REDIS_PORT"

    response=$(
      redis-cli \
        -u $uri \
        ping
    )
    if [ "$response" != "PONG" ] ; then
      echo "$response"
      exit 1
    fi
    echo "response=$response"
  replace-values.sh: |
    #!/usr/bin/env bash
    REDIS_NAME=${REDIS_NAME:-"myMaster"}
    REDIS_MASTER=${REDIS_INITIAL_MASTER_HOST:-"localost"}
    REDIS_PASSWORD=${REDIS_PASSWORD:-"default"}
    QUORUM=${QUORUM:-"2"}
    POD_FQDN=${POD_FQDN:-"localhost"}
    sed_values() {
        file=$1
        sed -i "s/__REDIS_NAME__/${REDIS_NAME}/g" $file
        sed -i "s/__REDIS_MASTER__/${REDIS_MASTER}/g" $file
        sed -i "s/__REDIS_PASSWORD__/${REDIS_PASSWORD}/g" $file
        sed -i "s/__POD_FQDN__/${POD_FQDN}/g" $file
        sed -i "s/__QUORUM__/${QUORUM}/g" $file
        sed -i "s/__HEADLESS_SVC__/${HEADLESS_SVC}/g" $file
        sed -r -i "s/(sentinel monitor .*)[0-9]$/\1 ${QUORUM}/g" $file
        if [[ "$POD_FQDN" == "$REDIS_MASTER" ]] ; then
            sed -i "s/__REPLICAOF__//g" $file
        else
            sed -i "s/__REPLICAOF__/replicaof ${REDIS_MASTER} 6379/g" $file
        fi

    }

    dir=$1
    for file in `find $dir -type f -name "*.conf"`; do
        sed_values $file
    done
  sentinel_liveness.sh: |
    #!/bin/bash

    REDIS_SENTINEL_HOST=${REDIS_SENTINEL_HOST:-"0.0.0.0"}
    REDIS_SENTINEL_PORT=${REDIS_SENTINEL_PORT:-"26379"}
    REDIS_USER=${REDIS_USER:-"default"}
    REDIS_PASSWORD=${REDIS_PASSWORD:-"default"}
    uri="redis://$REDIS_USER:$REDIS_PASSWORD@$REDIS_SENTINEL_HOST:$REDIS_SENTINEL_PORT"

    response=$(
      redis-cli \
        -u $uri \
        ping
    )
    if [ "$response" != "PONG" ]; then
      echo "$response"
      exit 1
    fi
    echo "response=$response"
kind: ConfigMap
metadata:
  labels:
    app.redis.instance: redis
  name: redis-scripts-6cmmk72t4b
  namespace: test-redis
