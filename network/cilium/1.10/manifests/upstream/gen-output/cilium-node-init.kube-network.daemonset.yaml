apiVersion: apps/v1
kind: DaemonSet
metadata:
  labels:
    app: cilium-node-init
  name: cilium-node-init
  namespace: kube-network
spec:
  selector:
    matchLabels:
      app: cilium-node-init
  template:
    metadata:
      annotations: null
      labels:
        app: cilium-node-init
    spec:
      containers:
      - env:
        - name: CHECKPOINT_PATH
          value: /tmp/node-init.cilium.io
        - name: STARTUP_SCRIPT
          value: |
            #!/bin/bash

            set -o errexit
            set -o pipefail
            set -o nounset

            mount | grep "/sys/fs/bpf type bpf" || {
              # Mount the filesystem until next reboot
              echo "Mounting BPF filesystem..."
              mount bpffs /sys/fs/bpf -t bpf

              # Configure systemd to mount after next boot
              echo "Installing BPF filesystem mount"
              cat >/tmp/sys-fs-bpf.mount <<EOF
            [Unit]
            Description=Mount BPF filesystem (Cilium)
            Documentation=http://docs.cilium.io/
            DefaultDependencies=no
            Before=local-fs.target umount.target
            After=swap.target

            [Mount]
            What=bpffs
            Where=/sys/fs/bpf
            Type=bpf
            Options=rw,nosuid,nodev,noexec,relatime,mode=700

            [Install]
            WantedBy=multi-user.target
            EOF

              if [ -d "/etc/systemd/system/" ]; then
                mv /tmp/sys-fs-bpf.mount /etc/systemd/system/
                echo "Installed sys-fs-bpf.mount to /etc/systemd/system/"
              elif [ -d "/lib/systemd/system/" ]; then
                mv /tmp/sys-fs-bpf.mount /lib/systemd/system/
                echo "Installed sys-fs-bpf.mount to /lib/systemd/system/"
              fi

              # Ensure that filesystem gets mounted on next reboot
              systemctl enable sys-fs-bpf.mount
              systemctl start sys-fs-bpf.mount
            }

            echo "Link information:"
            ip link

            echo "Routing table:"
            ip route

            echo "Addressing:"
            ip -4 a
            ip -6 a
            date > /tmp/cilium-bootstrap-time

            # AKS: If azure-vnet is installed on the node, and (still) configured in bridge mode,
            # configure it as 'transparent' to be consistent with Cilium's CNI chaining config.
            # If the azure-vnet CNI config is not removed, kubelet will execute CNI CHECK commands
            # against it every 5 seconds and write 'bridge' to its state file, causing inconsistent
            # behaviour when Pods are removed.
            if [ -f /etc/cni/net.d/10-azure.conflist ]; then
              echo "Ensuring azure-vnet is configured in 'transparent' mode..."
              sed -i 's/"mode":\s*"bridge"/"mode":"transparent"/g' /etc/cni/net.d/10-azure.conflist
            fi
            echo "Node initialization complete"
        image: quay.io/cilium/startup-script:62bfbe88c17778aad7bef9fa57ff9e2d4a9ba0d8
        imagePullPolicy: IfNotPresent
        name: node-init
        securityContext:
          privileged: true
      hostNetwork: true
      hostPID: true
      priorityClassName: system-node-critical
      tolerations:
      - operator: Exists
