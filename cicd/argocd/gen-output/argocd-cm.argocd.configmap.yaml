apiVersion: v1
data:
  application.instanceLabelKey: argocd.argoproj.io/instance
  configManagementPlugins: |
    - name: kustomize-gcrypt
      init:
        command:
          - sh
          - -c
        args:
          - |
            git crypt unlock /etc/git-crypt/gitcrypt.key || true
      generate:
        command:
          - kustomize
        args:
          - build
  oidc.config: |
    name: SSO
    issuer: https://sso.microspray.io
    clientID: argocd
    clientSecret: "argosecret</!ChangeME!\>"
    # Optional set of OIDC scopes to request. If omitted, defaults to: ["openid", "profile", "email", "groups"]
    requestedScopes: ["openid", "profile", "email", "groups"]
    # Optional set of OIDC claims to request on the ID token.
    requestedIDTokenClaims: {"groups": {"essential": true}}
  repositories: |
    - type: git
      url: https://github.com/myorg/repo1.git
      name: micros-infra
    - type: git
      url: https://github.com/myorg/repo2.git
      name: micros-deploy
  repository.credentials: |
    - url: https://github.com/myorg
      name: micros
      passwordSecret:
        key: password
        name: github-token
      usernameSecret:
        key: username
        name: github-token
  resource.customizations.health.argoproj.io_Application: |
    hs = {}
    hs.status = "Progressing"
    hs.message = ""
    if obj.status ~= nil then
      if obj.status.health ~= nil then
        hs.status = obj.status.health.status
        if obj.status.health.message ~= nil then
          hs.message = obj.status.health.message
        end
      end
    end
    return hs
  resource.customizations.health.cert-manager.io_Certificate: |
    hs = {}
    if obj.status ~= nil then
      if obj.status.conditions ~= nil then
        for i, condition in ipairs(obj.status.conditions) do
          if condition.type == "Ready" and condition.status == "False" then
            hs.status = "Degraded"
            hs.message = condition.message
            return hs
          end
          if condition.type == "Ready" and condition.status == "True" then
            hs.status = "Healthy"
            hs.message = condition.message
            return hs
          end
        end
      end
    end

    hs.status = "Progressing"
    hs.message = "Waiting for certificate"
    return hs
  resource.customizations.health.networking.k8s.io_Ingress: |
    hs = {}
    hs.status = "Healthy"
    return hs
  resource.customizations.useOpenLibs.argoproj.io_Application: "true"
  resource.customizations.useOpenLibs.cert-manager.io_Certificate: "true"
  resource.customizations.useOpenLibs.networking.k8s.io_Ingress: "true"
  statusbadge.enabled: "true"
  url: https://argocd.microspray.io
kind: ConfigMap
metadata:
  labels:
    app.kubernetes.io/name: argocd-cm
    app.kubernetes.io/part-of: argocd
  name: argocd-cm
  namespace: argocd
