---
# Source: gitlab-runner/templates/service-account.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: "gitlab-runner"
  namespace: "gitlab-runner"
  labels:
    app: gitlab-runner
    chart: gitlab-runner-0.65.0
    release: "cluster"
    heritage: "Helm"
---
# Source: gitlab-runner/templates/secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: gitlab-runner
  namespace: "gitlab-runner"
  labels:
    app: gitlab-runner
    chart: gitlab-runner-0.65.0
    release: "cluster"
    heritage: "Helm"
type: Opaque
data:
  runner-registration-token: ""
  runner-token: "Q0hBTkdFTUUgdmlhIGt1c3RvbWl6ZSBzZWNyZXRHZW5lcmF0b3I="
---
# Source: gitlab-runner/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: gitlab-runner
  namespace: "gitlab-runner"
  labels:
    app: gitlab-runner
    chart: gitlab-runner-0.65.0
    release: "cluster"
    heritage: "Helm"
data:
  entrypoint: |
    #!/bin/bash
    set -e

    export CONFIG_PATH_FOR_INIT="/home/gitlab-runner/.gitlab-runner/"
    mkdir -p ${CONFIG_PATH_FOR_INIT}
    cp /configmaps/config.toml ${CONFIG_PATH_FOR_INIT}

    # Set up environment variables for cache
    if [[ -f /secrets/accesskey && -f /secrets/secretkey ]]; then
      export CACHE_S3_ACCESS_KEY=$(cat /secrets/accesskey)
      export CACHE_S3_SECRET_KEY=$(cat /secrets/secretkey)
    fi

    if [[ -f /secrets/gcs-applicaton-credentials-file ]]; then
      export GOOGLE_APPLICATION_CREDENTIALS="/secrets/gcs-applicaton-credentials-file"
    elif [[ -f /secrets/gcs-application-credentials-file ]]; then
      export GOOGLE_APPLICATION_CREDENTIALS="/secrets/gcs-application-credentials-file"
    else
      if [[ -f /secrets/gcs-access-id && -f /secrets/gcs-private-key ]]; then
        export CACHE_GCS_ACCESS_ID=$(cat /secrets/gcs-access-id)
        # echo -e used to make private key multiline (in google json auth key private key is oneline with \n)
        export CACHE_GCS_PRIVATE_KEY=$(echo -e $(cat /secrets/gcs-private-key))
      fi
    fi

    if [[ -f /secrets/azure-account-name && -f /secrets/azure-account-key ]]; then
      export CACHE_AZURE_ACCOUNT_NAME=$(cat /secrets/azure-account-name)
      export CACHE_AZURE_ACCOUNT_KEY=$(cat /secrets/azure-account-key)
    fi

    if [[ -f /secrets/runner-registration-token ]]; then
      export REGISTRATION_TOKEN=$(cat /secrets/runner-registration-token)
    fi

    if [[ -f /secrets/runner-token ]]; then
      export CI_SERVER_TOKEN=$(cat /secrets/runner-token)
    fi

    # Register the runner
    if ! sh /configmaps/register-the-runner; then
      exit 1
    fi

    # Run pre-entrypoint-script
    if ! bash /configmaps/pre-entrypoint-script; then
      exit 1
    fi

    # Start the runner
    exec /entrypoint run \
      --user=gitlab-runner \
      --working-directory=/home/gitlab-runner

  config.toml: |
    shutdown_timeout = 5
    concurrent = 30
    check_interval = 3
    log_level = "info"
    listen_address = ":9252"

  
  config.template.toml:   |
    [[runners]]
      [runners.kubernetes]
        namespace = "gitlab-runner"
        image = "alpine"
  

  register-the-runner: |
    #!/bin/bash
    signal_handler() {
      if [ ! -d "/proc/$register_pid" ]; then
        wait $register_pid
      fi
      exit
    }
    trap 'signal_handler' SIGQUIT
    trap 'signal_handler' SIGINT

    MAX_REGISTER_ATTEMPTS=30

    # Reset/unset the not needed flags when an authentication token
    RUN_UNTAGGED=""
    ACCESS_LEVEL=""

    for i in $(seq 1 "${MAX_REGISTER_ATTEMPTS}"); do
      echo "Registration attempt ${i} of ${MAX_REGISTER_ATTEMPTS}"
      /entrypoint register \
        ${RUN_UNTAGGED} \
        ${ACCESS_LEVEL} \
        --template-config /configmaps/config.template.toml \
        --non-interactive &

      register_pid=$!
      wait $register_pid
      retval=$?

      if [ ${retval} = 0 ]; then
        break
      elif [ ${i} = ${MAX_REGISTER_ATTEMPTS} ]; then
        exit 1
      fi

      sleep 5
    done

    exit 0

  check-live: |
    #!/bin/bash
    set -eou pipefail

    export CONFIG_PATH_FOR_INIT="/home/gitlab-runner/.gitlab-runner/"

    if ! /usr/bin/pgrep -f ".*register-the-runner"  > /dev/null && ! /usr/bin/pgrep -f "gitlab.*runner"  > /dev/null ; then
      exit 1
    fi

    awk -F'"' '/^  name = ".*"/ { print $2 }' "${CONFIG_PATH_FOR_INIT}/config.toml" | xargs -I{} gitlab-runner verify -n {} 2>&1 | grep -E "is alive|is valid"

  pre-entrypoint-script: |
---
# Source: gitlab-runner/templates/role.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: "Role"
metadata:
  name: gitlab-runner
  labels:
    app: gitlab-runner
    chart: gitlab-runner-0.65.0
    release: "cluster"
    heritage: "Helm"
  namespace: "gitlab-runner"
rules:
- apiGroups: [""]
  resources: ["configmaps","events","pods","pods/attach","pods/exec","secrets","services"]
  verbs: ["get","list","watch","create","patch","update","delete"]
- apiGroups: [""]
  resources: ["pods/exec"]
  verbs: ["create","patch","delete"]
- apiGroups: [""]
  resources: ["pods/log"]
  verbs: ["get"]
---
# Source: gitlab-runner/templates/role-binding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: "RoleBinding"
metadata:
  name: gitlab-runner
  labels:
    app: gitlab-runner
    chart: gitlab-runner-0.65.0
    release: "cluster"
    heritage: "Helm"
  namespace: "gitlab-runner"
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: "Role"
  name: gitlab-runner
subjects:
- kind: ServiceAccount
  name: "gitlab-runner"
  namespace: "gitlab-runner"
---
# Source: gitlab-runner/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: "gitlab-runner"
  namespace: "gitlab-runner"
  labels:
    app: "gitlab-runner"
    chart: "gitlab-runner-0.65.0"
    release: "cluster"
    heritage: "Helm"
spec:
  ports:
  - name: "metrics"
    port: 9252
    targetPort: "metrics"
  selector:
    app: "gitlab-runner"
    release: "cluster"
  type: "ClusterIP"
---
# Source: gitlab-runner/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: gitlab-runner
  namespace: "gitlab-runner"
  labels:
    app: gitlab-runner
    chart: gitlab-runner-0.65.0
    release: "cluster"
    heritage: "Helm"
spec:
  replicas: 3
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app: gitlab-runner
  template:
    metadata:
      labels:
        app: gitlab-runner
        chart: gitlab-runner-0.65.0
        release: "cluster"
        heritage: "Helm"
      annotations:
        checksum/configmap: 047695a50de234e182c6571426f7f3fc96f8e63d4c7c3c321db71506cf00a4cf
        checksum/secrets: ff7a0cb8e86361819c41f2527905dc7c0cd198e014c0cb36a91ea72876ff06fa
        prometheus.io/scrape: 'true'
        prometheus.io/port: "9252"
    spec:
      securityContext: 
        fsGroup: 65533
        runAsUser: 100
      terminationGracePeriodSeconds: 300
      serviceAccountName: "gitlab-runner"
      containers:
      - name: gitlab-runner
        image: registry.gitlab.com/gitlab-org/gitlab-runner:alpine
        imagePullPolicy: "IfNotPresent"
        securityContext: 
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          privileged: false
          readOnlyRootFilesystem: false
          runAsNonRoot: true
        
        command: ["/usr/bin/dumb-init", "--", "/bin/bash", "/configmaps/entrypoint"]
        env:        
        - name: CI_SERVER_URL
          value: "https://gitlab.com"
        - name: RUNNER_EXECUTOR
          value: "kubernetes"
        - name: REGISTER_LOCKED
          value: "true"
        - name: RUNNER_TAG_LIST
          value: ""
        livenessProbe:
          exec:
            command: ["/bin/bash", "/configmaps/check-live"]
          initialDelaySeconds: 60
          timeoutSeconds: 3
          periodSeconds: 10
          successThreshold: 1
          failureThreshold: 3
        readinessProbe:
          exec:
            command: ["/usr/bin/pgrep","gitlab.*runner"]
          initialDelaySeconds: 10
          timeoutSeconds: 3
          periodSeconds: 10
          successThreshold: 1
          failureThreshold: 3
        ports:
        - name: "metrics"
          containerPort: 9252
        volumeMounts:
        - name: projected-secrets
          mountPath: /secrets
        - name: etc-gitlab-runner
          mountPath: /home/gitlab-runner/.gitlab-runner
        - name: configmaps
          mountPath: /configmaps
        resources:
          {}
      volumes:
      - name: runner-secrets
        emptyDir:
          medium: "Memory"
      - name: etc-gitlab-runner
        emptyDir:
          medium: "Memory"
      - name: projected-secrets
        projected:
          sources:
            - secret:
                name: gitlab-runner
                items:
                  - key: runner-registration-token
                    path: runner-registration-token
                  - key: runner-token
                    path: runner-token
      - name: configmaps
        configMap:
          name: gitlab-runner
---
# Source: gitlab-runner/templates/servicemonitor.yaml
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: "gitlab-runner"
  namespace: "gitlab-runner"
  labels:
    app: "gitlab-runner"
    chart: "gitlab-runner-0.65.0"
    release: "cluster"
    heritage: "Helm"
spec:
  endpoints:
  - port: "metrics"
  namespaceSelector:
    matchNames:
      - "gitlab-runner"
  selector:
    matchLabels:
      app: "gitlab-runner"
      chart: "gitlab-runner-0.65.0"
      release: "cluster"
      heritage: "Helm"
