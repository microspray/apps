apiVersion: v1
data:
  check-live: |
    #!/bin/bash
    set -eou pipefail

    export CONFIG_PATH_FOR_INIT="/home/gitlab-runner/.gitlab-runner/"

    if ! /usr/bin/pgrep -f ".*register-the-runner"  > /dev/null && ! /usr/bin/pgrep -f "gitlab.*runner"  > /dev/null ; then
      exit 1
    fi

    awk -F'"' '/^  name = ".*"/ { print $2 }' "${CONFIG_PATH_FOR_INIT}/config.toml" | xargs -I{} gitlab-runner verify -n {} 2>&1 | grep -E "is alive|is valid"
  config.template.toml: |
    concurrent = 30
    check_interval = 3
    log_level = "info"
    listen_address = ':9252'

    [[runners]]
      environment = ["container=docker"]
    [runners.kubernetes]
        image = "ubuntu:22.04"
        namespace = "gitlab-runner"
        pull_policy = "always"
        privileged = false
  config.toml: |
    shutdown_timeout = 5
    concurrent = 30
    check_interval = 3
    log_level = "info"
    listen_address = ":9252"
  entrypoint: |
    #!/bin/bash
    set -e

    export CONFIG_PATH_FOR_INIT="/home/gitlab-runner/.gitlab-runner/"
    mkdir -p ${CONFIG_PATH_FOR_INIT}
    cp /configmaps/config.toml ${CONFIG_PATH_FOR_INIT}

    # Set up environment variables for cache
    if [[ -f /secrets/accesskey && -f /secrets/secretkey ]]; then
      export CACHE_S3_ACCESS_KEY=$(cat /secrets/accesskey)
      export CACHE_S3_SECRET_KEY=$(cat /secrets/secretkey)
    fi

    if [[ -f /secrets/gcs-applicaton-credentials-file ]]; then
      export GOOGLE_APPLICATION_CREDENTIALS="/secrets/gcs-applicaton-credentials-file"
    elif [[ -f /secrets/gcs-application-credentials-file ]]; then
      export GOOGLE_APPLICATION_CREDENTIALS="/secrets/gcs-application-credentials-file"
    else
      if [[ -f /secrets/gcs-access-id && -f /secrets/gcs-private-key ]]; then
        export CACHE_GCS_ACCESS_ID=$(cat /secrets/gcs-access-id)
        # echo -e used to make private key multiline (in google json auth key private key is oneline with \n)
        export CACHE_GCS_PRIVATE_KEY=$(echo -e $(cat /secrets/gcs-private-key))
      fi
    fi

    if [[ -f /secrets/azure-account-name && -f /secrets/azure-account-key ]]; then
      export CACHE_AZURE_ACCOUNT_NAME=$(cat /secrets/azure-account-name)
      export CACHE_AZURE_ACCOUNT_KEY=$(cat /secrets/azure-account-key)
    fi

    if [[ -f /secrets/runner-registration-token ]]; then
      export REGISTRATION_TOKEN=$(cat /secrets/runner-registration-token)
    fi

    if [[ -f /secrets/runner-token ]]; then
      export CI_SERVER_TOKEN=$(cat /secrets/runner-token)
    fi

    # Register the runner
    if ! sh /configmaps/register-the-runner; then
      exit 1
    fi

    # Run pre-entrypoint-script
    if ! bash /configmaps/pre-entrypoint-script; then
      exit 1
    fi

    # Start the runner
    exec /entrypoint run \
      --user=gitlab-runner \
      --working-directory=/home/gitlab-runner
  pre-entrypoint-script: ""
  register-the-runner: |
    #!/bin/bash
    signal_handler() {
      if [ ! -d "/proc/$register_pid" ]; then
        wait $register_pid
      fi
      exit
    }
    trap 'signal_handler' SIGQUIT
    trap 'signal_handler' SIGINT

    MAX_REGISTER_ATTEMPTS=30

    # Reset/unset the not needed flags when an authentication token
    RUN_UNTAGGED=""
    ACCESS_LEVEL=""

    for i in $(seq 1 "${MAX_REGISTER_ATTEMPTS}"); do
      echo "Registration attempt ${i} of ${MAX_REGISTER_ATTEMPTS}"
      /entrypoint register \
        ${RUN_UNTAGGED} \
        ${ACCESS_LEVEL} \
        --template-config /configmaps/config.template.toml \
        --non-interactive &

      register_pid=$!
      wait $register_pid
      retval=$?

      if [ ${retval} = 0 ]; then
        break
      elif [ ${i} = ${MAX_REGISTER_ATTEMPTS} ]; then
        exit 1
      fi

      sleep 5
    done

    exit 0
kind: ConfigMap
metadata:
  labels:
    app: gitlab-runner
    chart: gitlab-runner-0.65.0
    heritage: Helm
    release: cluster
  name: gitlab-runner
  namespace: gitlab-runner
